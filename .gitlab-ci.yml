# GitLab CI/CD Pipeline for Amber Discord Bot
# Simplified Auto-DevOps approach

image: 
  name: sonarsource/sonar-scanner-cli:11
  entrypoint: [""]

stages:
- build-sonar
- build
- test
- deploy
- review
- dast
- staging
- canary
- production
- incremental rollout 10%
- incremental rollout 25%
- incremental rollout 50%
- incremental rollout 100%
- performance
- cleanup

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  NODE_VERSION: "20"
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  # Auto-DevOps configuration
  POSTGRES_ENABLED: "false"
  POSTGRES_MANAGED: "false"
  AUTO_DEVOPS_CHART: "auto-deploy-app"

# Cache template for Node.js projects
.cache_template: &cache_template
  cache:
    key: 
      files:
        - package-lock.json
    paths:
      - node_modules/
      - .npm/
    policy: pull-push

# Override Auto-DevOps build job to handle Node.js
build:
  stage: build
  image: node:20
  <<: *cache_template
  before_script:
    - apt-get update && apt-get install -y python3 make g++
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run build
  artifacts:
    paths:
      - dist/
      - node_modules/
    expire_in: 1 hour

# Override Auto-DevOps test job
test:
  stage: test
  image: node:20
  services: []  # No external services needed
  before_script:
    - echo "Using artifacts from build job"
  script:
    - npm run test:ci
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    when: always
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    expire_in: 1 week

# Override linting (run in test stage)
lint:
  stage: test
  image: node:20
  services: []
  script:
    - npm run lint
  artifacts:
    reports:
      junit: reports/lint-results.xml
    when: always
    expire_in: 1 week

# SonarQube Analysis (custom)
sonar_scan:
  stage: test
  image: sonarsource/sonar-scanner-cli:11
  cache:
    policy: pull-push
    key: "sonar-cache-$CI_COMMIT_REF_SLUG"
    paths:
      - "${SONAR_USER_HOME}/cache"
      - sonar-scanner/
  before_script:
    - |
      if [ -z "$SONAR_HOST_URL" ]; then
        echo "SONAR_HOST_URL is not set. Skipping SonarQube analysis."
        exit 0
      fi
      if [[ ! "$SONAR_HOST_URL" =~ ^https?:// ]]; then
        export SONAR_HOST_URL="http://${SONAR_HOST_URL}"
      fi
  script: 
    - sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}"
  allow_failure: true

# Pages for coverage reports
pages:
  stage: deploy
  dependencies:
    - test
  script:
    - mkdir public
    - cp -r coverage/lcov-report/* public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'

# Include Auto-DevOps template - This does all the heavy lifting!
include:
  - template: Auto-DevOps.gitlab-ci.yml

# Disable Auto-DevOps jobs we don't want
staging:
  rules:
    - when: never

canary:
  rules:
    - when: never

production:
  rules:
    - when: never