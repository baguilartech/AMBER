# GitLab CI/CD Pipeline for Amber Discord Bot
# Simplified Auto-DevOps approach

image: 
  name: sonarsource/sonar-scanner-cli:11
  entrypoint: [""]

stages:
- build-sonar
- build
- test
- deploy
- review
- dast
- staging
- canary
- production
- incremental rollout 10%
- incremental rollout 25%
- incremental rollout 50%
- incremental rollout 100%
- performance
- cleanup

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  NODE_VERSION: "20"
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  # Auto-DevOps configuration
  POSTGRES_ENABLED: "false"
  POSTGRES_MANAGED: "false"
  AUTO_DEVOPS_CHART: "auto-deploy-app"
  # Container registry configuration
  DOCKER_TLS_CERTDIR: "/certs"
  CONTAINER_IMAGE: "${CI_REGISTRY_IMAGE}/discord-bot"
  CS_IMAGE: "${CI_REGISTRY_IMAGE}/discord-bot:${CI_COMMIT_SHA}"

# Cache template for Node.js projects
.cache_template: &cache_template
  cache:
    key: 
      files:
        - package-lock.json
    paths:
      - node_modules/
      - .npm/
    policy: pull-push

# Override Auto-DevOps build job to handle Node.js
build:
  stage: build
  image: node:20
  <<: *cache_template
  before_script:
    - apt-get update && apt-get install -y python3 make g++
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run build
  artifacts:
    paths:
      - dist/
      - node_modules/
    expire_in: 1 hour

# Override Auto-DevOps test job
test:
  stage: test
  image: node:20
  services: []  # No external services needed
  before_script:
    - echo "Using artifacts from build job"
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run test:ci
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
      - reports/
    expire_in: 1 week

# Override linting (run in test stage)
lint:
  stage: test
  image: node:20
  services: []
  script:
    - npm run lint
    - npm run lint:ci
  artifacts:
    reports:
      junit: reports/lint-results.xml
    when: always
    expire_in: 1 week

# SonarQube Analysis (custom)
sonar_scan:
  stage: test
  image: sonarsource/sonar-scanner-cli:11
  needs:
    - test
  dependencies:
    - test
  cache:
    policy: pull-push
    key: "sonar-cache-$CI_COMMIT_REF_SLUG"
    paths:
      - "${SONAR_USER_HOME}/cache"
      - sonar-scanner/
  before_script:
    - |
      if [ -z "$SONAR_HOST_URL" ]; then
        echo "SONAR_HOST_URL is not set. Skipping SonarQube analysis."
        exit 0
      fi
      if [ -z "$SONAR_TOKEN" ]; then
        echo "SONAR_TOKEN is not set. Skipping SonarQube analysis."
        exit 0
      fi
      if [[ ! "$SONAR_HOST_URL" =~ ^https?:// ]]; then
        export SONAR_HOST_URL="http://${SONAR_HOST_URL}"
      fi
  script: 
    - sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}"
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'develop'

# Pages for coverage reports
pages:
  stage: deploy
  dependencies:
    - test
  script:
    - mkdir public
    - cp -r coverage/lcov-report/* public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'

# Container build and push job
build-container:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  before_script:
    - |
      # Wait for Docker daemon to be ready
      until docker info >/dev/null 2>&1; do
        echo "Waiting for Docker daemon..."
        sleep 1
      done
    - echo "Logging into GitLab Container Registry..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - echo "Building Discord bot container image..."
    - docker build -t $CONTAINER_IMAGE:$CI_COMMIT_SHA -t $CONTAINER_IMAGE:latest .
    - echo "Pushing container image to registry..."
    - docker push $CONTAINER_IMAGE:$CI_COMMIT_SHA
    - docker push $CONTAINER_IMAGE:latest
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'develop'
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - Dockerfile
        - package*.json
        - src/**/*

# Auto-DevOps will handle code_quality automatically

# Release job for tagged versions
release:
  stage: deploy
  image: node:20
  <<: *cache_template
  before_script:
    - npm ci --cache .npm --prefer-offline
    - |
      # Configure npm authentication for GitHub registry
      echo "@baguilartech:registry=https://npm.pkg.github.com/" >> .npmrc
      echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> .npmrc
  script:
    - npm run build
    - npm run test:ci
    - npm run lint
    - echo "Creating GitLab release for tag $CI_COMMIT_TAG"
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        echo "Publishing to GitHub Package Registry..."
        npm publish
      fi
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG

# Release container image for tagged versions
release-container:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  before_script:
    - |
      until docker info >/dev/null 2>&1; do
        echo "Waiting for Docker daemon..."
        sleep 1
      done
    - echo "Logging into GitLab Container Registry..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        VERSION=${CI_COMMIT_TAG#v}
        echo "Building release container for version $VERSION..."
        docker build -t $CONTAINER_IMAGE:$VERSION -t $CONTAINER_IMAGE:latest .
        docker push $CONTAINER_IMAGE:$VERSION
        docker push $CONTAINER_IMAGE:latest
        echo "Released container images:"
        echo "  - $CONTAINER_IMAGE:$VERSION"
        echo "  - $CONTAINER_IMAGE:latest"
      fi
  rules:
    - if: $CI_COMMIT_TAG

# Wiki publishing job
publish-wiki:
  stage: deploy
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - apk add --no-cache git rsync
    - git config --global user.email "gitlab-ci@${CI_SERVER_HOST}"
    - git config --global user.name "GitLab CI"
    - |
      # Check if required variables are set
      if [ -z "$WIKI_ACCESS_TOKEN" ]; then
        echo "ERROR: WIKI_ACCESS_TOKEN is not set."
        echo "Please set this variable in your GitLab project settings with a project access token that has 'write_repository' scope."
        exit 1
      fi
  script:
    - echo "Publishing wiki from repository..."
    - |
      # Clone the wiki repository
      git clone https://project-token:${WIKI_ACCESS_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.wiki.git wiki-repo
      
      # Navigate to wiki repo
      cd wiki-repo
      
      # Clear existing content (preserve .git directory)
      find . -type f ! -path "./.git/*" -delete
      find . -type d ! -path "./.git*" -empty -delete 2>/dev/null || true
      
      # Copy new content from wiki directory
      rsync -av --exclude='.git*' ${CI_PROJECT_DIR}/wiki/ ./
      
      # Add all changes
      git add . || true
      
      # Check if there are changes to commit
      if git diff --cached --quiet; then
        echo "No changes detected in wiki content"
        exit 0
      else
        echo "Changes detected, committing wiki updates..."
        git commit -m "Update wiki from ${CI_COMMIT_SHA:0:8} - ${CI_COMMIT_TITLE}"
        git push origin main
        echo "Wiki updated successfully"
      fi
  after_script:
    - echo "Wiki publishing completed"
  when: always

# Include Auto-DevOps template - This does all the heavy lifting!
include:
  - template: Auto-DevOps.gitlab-ci.yml

# Disable Auto-DevOps jobs we don't want
staging:
  rules:
    - when: never

canary:
  rules:
    - when: never

production:
  rules:
    - when: never
