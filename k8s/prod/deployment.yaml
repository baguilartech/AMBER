apiVersion: apps/v1
kind: Deployment
metadata:
  name: amber-discord-bot
  namespace: amber
  labels:
    app: discord-bot
    version: v1.1.2
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: discord-bot
  template:
    metadata:
      labels:
        app: discord-bot
        version: v1.1.2
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5150"
        prometheus.io/path: "/metrics"
        co.elastic.logs/enabled: "true"
        co.elastic.logs/json.keys_under_root: "true"
    spec:
      hostNetwork: true
      containers:
      - name: amber-bot
        image: $CI_REGISTRY_IMAGE/discord-bot:$IMAGE_TAG
        imagePullPolicy: Always
        ports:
        - containerPort: 5150
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: amber-config
              key: NODE_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: amber-config
              key: LOG_LEVEL
        - name: LOG_FORMAT
          valueFrom:
            configMapKeyRef:
              name: amber-config
              key: LOG_FORMAT
        - name: ENABLE_METRICS
          valueFrom:
            configMapKeyRef:
              name: amber-config
              key: ENABLE_METRICS
        - name: METRICS_PORT
          valueFrom:
            configMapKeyRef:
              name: amber-config
              key: METRICS_PORT
        - name: HEALTH_CHECK_PORT
          valueFrom:
            configMapKeyRef:
              name: amber-config
              key: HEALTH_CHECK_PORT
        - name: DISCORD_TOKEN
          valueFrom:
            secretKeyRef:
              name: amber-secrets
              key: DISCORD_TOKEN
        - name: DISCORD_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: amber-secrets
              key: DISCORD_CLIENT_ID
        - name: SPOTIFY_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: amber-secrets
              key: SPOTIFY_CLIENT_ID
        - name: SPOTIFY_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: amber-secrets
              key: SPOTIFY_CLIENT_SECRET
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: amber-secrets
              key: SENTRY_DSN
        - name: YOUTUBE_API_KEY
          valueFrom:
            secretKeyRef:
              name: amber-secrets
              key: YOUTUBE_API_KEY
        - name: SENTRY_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: amber-config
              key: SENTRY_ENVIRONMENT
        - name: NODE_TLS_REJECT_UNAUTHORIZED
          value: "0"
        livenessProbe:
          httpGet:
            path: /health
            port: 5150
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 5150
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: logs
        emptyDir: {}
      imagePullSecrets:
      - name: gitlab-registry
      restartPolicy: Always